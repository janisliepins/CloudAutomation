Parameters:
  VPCCIDR:
    Type: String
    Description: CIDR block should be used to create the VPC (e.g. 10.0.0.0/16)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 10.0.0.0/16)
  PublicSubnet1:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ1 (e.g. 10.0.0.0/24)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 10.0.0.0/24)
  PublicSubnet2:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ1 (e.g. 10.0.1.0/24)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 10.0.1.0/24)
  PrivateSubnet1:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ1 (e.g. 10.0.2.0/24)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 10.0.2.0/24)
  PrivateSubnet2:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ1 (e.g. 10.0.3.0/24)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 10.0.3.0/24) 

Resources:  

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC
          

  PubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1
      AvailabilityZone: !Sub ${AWS::Region}a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1-${AWS::Region}a

  PubSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2
      AvailabilityZone: !Sub ${AWS::Region}b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2-${AWS::Region}b

  PriSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1-${AWS::Region}a

  PriSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2
      AvailabilityZone: !Sub ${AWS::Region}b
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2-${AWS::Region}b

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: GatewayToInternet

  NATEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: GatewayToInternet

  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ NATEIP1, AllocationId ]
      SubnetId: !Ref PubSubnet1

  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ NATEIP2, AllocationId ]
      SubnetId: !Ref PubSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable1 

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable2

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT2
      RouteTableId: !Ref PrivateRouteTable2

  PubSubnet1RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet1

  PubSubnet2RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet2

  PrivSubnet1RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PriSubnet1

  PrivSubnet2RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PriSubnet2

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS DB Subnet group
      SubnetIds: [!Ref PriSubnet1, !Ref PriSubnet2]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSubnetGroup      

Outputs:  
  VPCID:
    Description: VPC ID
    Value: !Ref VPC
    Export: 
      Name: !Sub "${AWS::StackName}:VPCID" 
  PrivateSubnet1:
    Description: Subnet ID of private subnet in AZ1
    Value: !Ref PriSubnet1
    Export: 
      Name: !Sub "${AWS::StackName}:PrivateSubnet1" 
  PrivateSubnet2:
    Description: Subnet ID of private subnet in AZ2
    Value: !Ref PriSubnet2
    Export: 
      Name: !Sub "${AWS::StackName}:PrivateSubnet2" 
  PublicSubnet1:
    Description: Subnet ID of public subnet in AZ1
    Value: !Ref PubSubnet1
    Export: 
      Name: !Sub "${AWS::StackName}:PublicSubnet1" 
  PublicSubnet2:
    Description: Subnet ID of public subnet in AZ2
    Value: !Ref PubSubnet2
    Export: 
      Name: !Sub "${AWS::StackName}:PublicSubnet2" 
  DBSubnetGroup:
    Description: Name of the DB Subnet group
    Value: !Ref RDSSubnetGroup
    Export: 
      Name: !Sub "${AWS::StackName}:RDSSubnetGroup" 
 