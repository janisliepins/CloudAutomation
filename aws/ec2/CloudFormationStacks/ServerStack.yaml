# Resursu grupas ievadparametru vērtību definēšanas sadaļa.
Parameters: 
  
  # Ievadparametra "InstanceCount" deklarācija un tā īpašību definēšana - tips, minimālais un maksimālais zīmju daudzums, apraksts.
  InstanceCount:        
    Type: String
    MinLength: 1
    MaxLength: 3
    Description: Enter desired count of EC2 instances.
  # Ievadparametra "NetworkStack" deklarācija un tā īpašību definēšana - tips un apraksts.
  NetworkStack:        
    Type: String
    Description: Enter the name of your network stack that you want to associate with your compute resources.
  # Ievadparametra "SecurityStack" deklarācija un tā īpašību definēšana - tips un apraksts.
  SecurityStack:        
    Type: String
    Description: Enter the name of your security stack that you want to associate with your compute resources.
    

# Resursu definēšanas sadaļa.
Resources:  
  
  ApplicationLoadBalancer: # Deklarets aplikaciju tikla slodzes lidzsvarotajs - darbojas "OSI" modela 7. limeni ("HTTP/S" protokli)
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Properties: # Definetas aplikaciju tikla slodzes lidzsvarotaja ipasibas
      Scheme: "internet-facing" # Definets, ka piekluve no interneta pieejama
      Subnets: # Defineti divi apakstikli, kas tiks pievienoti aplikaciju tikla slodzes lidzsvarotajam. Vertibas tiek iegutas no izveles parametru sadalas    
        - Fn::ImportValue: !Join [":", [!Ref "NetworkStack", PublicSubnet1]] 
        - Fn::ImportValue: !Join [":", [!Ref "NetworkStack", PublicSubnet2]]    
      SecurityGroups: 
        - Fn::ImportValue: !Join [":", [!Ref "SecurityStack", ALBSecurityGroup]]  # Atsauce uz drosibas grupu, kas tiks asocieta ar so resursu

  LoadBalancerListener: # Deklarets aplikaciju tikla slodzes lidzsvarotaja klausitajs
    Type: "AWS::ElasticLoadBalancingV2::Listener" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Properties: # Definetas aplikaciju tikla slodzes lidzsvarotaja klausitaja ipasibas      
      LoadBalancerArn: !Ref ApplicationLoadBalancer # Atsauce uz ieprieks izveidoto aplikaciju tikla slodzes lidzsvarotaju, kam tiks pievienots sis resurss
      Port: 80 # Ports uz kuru klausas resurss pec ienakosiem datuplusmas pieprasijumiem
      Protocol: "HTTP" # Protokols, kurs jaizmanto klientam, lai sutitu pieprasijumus
      DefaultActions: # Defineta nokluseta darbiba, kas javeic resursam - paradreset uz noteiktu merka grupu, kas deklareta un defineta nakosaja "DefaultTargetGroup" sadala
        - Type: "forward" 
          TargetGroupArn: !Ref "DefaultTargetGroup"    

  DefaultTargetGroup: # Deklareta merka grupa aplikaciju tikla slodzes lidzsvarotaja klausitajam
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Properties: # Definetas merka grupas ipasibas
      HealthCheckProtocol: "HTTP" # Protokols, kurs jaizmanto tikla slodzes lidzsvarotajam, lai veiktu instancu statusa parbaudi
      HealthCheckPath: "/" # Adresacijas cels uz kuru tiks veikta statusa parbaude
      HealthCheckPort: "traffic-port" # Adresacijas ports uz kuru tiks veikta statusa parbaude. Vertiba "traffic-port" atsaucas uz serveru instances defineto portu, uz kuru katra instance sanems datuplusmu
      HealthCheckIntervalSeconds: 6  # Definets, cik biezi aplikaciju tikla slodzes lidzsvarotajas sutis statusa parbaudes. Saja gadijuma 6 sekundes starp nakamas parbaudes veiksanas
      HealthCheckTimeoutSeconds: 5 # Definets, cik ilgi aplikaciju tikla slodzes lidzsvarotajas gaidis atbildi no instances. Saja gadijuma 5 sekundes 
      HealthyThresholdCount: 5 # Definets sekmigu atbilzu skaits, kas jasanem pec kartas no servera instances, lai definetu, ka servera instances statuss ir apmierinoss
      UnhealthyThresholdCount: 2 # Definets nesekmigu atbilzu skaits, kas jasanem pec kartas no servera instances, lai definetu, ka servera instances statuss ir neapmierinos
      VpcId: 
        Fn::ImportValue: !Join [":", [!Ref "NetworkStack", VPCID]] # Definets virtualais tikls, kura tiks izvietots resurss    
      Port: 80 # Ports uz kuru merka grupas servera instances sanems datuplusmu
      Protocol: "HTTP" # Protokols, kurs tiks izmantots datuplusmas marsutesanai uz merka grupas servera instancem
       
  AutoScalingGroup: # Deklareta automatiska merogosanas grupa
    CreationPolicy: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html
      ResourceSignal:
        Count: 2
        Timeout: "PT5M"
    UpdatePolicy: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html
      AutoScalingReplacingUpdate:
        WillReplace: true
    Type: "AWS::AutoScaling::AutoScalingGroup" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
    Properties: # Definetas automatiskas merogosanas grupas ipasibas      
      Cooldown: 300
      DesiredCapacity: !Ref InstanceCount # Definets, ka sai grupai jasastav no 2 serveru instancem. Atsauce uz ievadparametra vērtību.
      HealthCheckType: "ELB" # AWS resursa tips pret kuru tiks veikta statusa parbaude - saja gadijuma aplikaciju tikla slodzes lidzsvarotajs, kurs var noteikt statusu netikai instancei, bet ari pasai aplikacijai
      HealthCheckGracePeriod: 300 # Definets ilgums sekundes, pec cik ilga laika, kad tiek izveidota jauna servera instance, automatiska merogosanas grupa sak statusa parbaudes
      LaunchConfigurationName: !Ref LaunchConfiguration # Atsauce uz palaisanas konfiguraciju, kura tiks izmantota, izveidojot servera instances un definejot to ipasibas
      TargetGroupARNs: [!Ref DefaultTargetGroup] # Atsauce uz merka grupu
      MaxSize: !Ref InstanceCount # Definets maksimalais servera instancu skaits. Atsauce uz ievadparametra vērtību.
      MinSize: !Ref InstanceCount # Definets minimalais servera instancu skaits. Atsauce uz ievadparametra vērtību.
      VPCZoneIdentifier: # Defineti divi apakstikli, kuros tiks izvietota katra no serveru instancem. Vertibas tiek iegutas no izveles parametru sadalas 
        - Fn::ImportValue: !Join [":", [!Ref "NetworkStack", PrivateSubnet1]] 
        - Fn::ImportValue: !Join [":", [!Ref "NetworkStack", PrivateSubnet2]] 

  LaunchConfiguration: # Deklareta palaisanas konfiguracija "EC2" resursa servera instancem, kuru izmanto automatiskas merogosanas grupa servera instancu konfiguresanai
    Type: "AWS::AutoScaling::LaunchConfiguration" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html  
    Properties: 
      InstanceType: t2.micro # Statiski definets velamais "EC2" resursa tips - apzime virtuala servera izmera un jaudas apmerus
      IamInstanceProfile: 
        Fn::ImportValue: !Join [":", [!Ref "SecurityStack", EC2InstanceProfile]]  # Atsauce uz pielaizu profilu, kas tiks asociets ar instancem
      ImageId: ami-035be7bafff33b6b6 # Statiski definets velamais "EC2" resursa - virtuala servera - imidza identifikacijas nummurs - saja gadijuma "Amazon Linux 2 AMI", no kura tiks veidotas servera instances
      SecurityGroups:
        - Fn::ImportValue: !Join [":", [!Ref "SecurityStack", EC2SecurityGroup]] # Atsauce uz drosibas grupu, kas tiks asocieta ar so resursu    
      UserData: # Ievaddatu definesana, noteiktu komandu izpildei, kad tiek palaista virtualais serveris
        'Fn::Base64': # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
          !Sub | # Pirma darbiba startejot jaunu servera instanci ir instalet "CloudFormation" paligskriptus, kas laus talak automatized servera konfiguresanu atbilstosi vajadzibam
            #!/bin/bash    
            yum update -y aws-cfn-bootstrap # Tiek instaleta "AWS" uztureta paligskriptu programmatura             
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets install_all --region ${AWS::Region} # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-signal.html
    CreationPolicy: # Deklarets atributs, kurs nelauj "Cloudformation" resursam noteikt grupas izveides veiksmigu statusu, kamer nav sanemts definets signalu skaits noteikta intervala
      ResourceSignal: # Definets resursa signals un ta ipasibas
        Count: 1
        Timeout: "PT5M"                   
    Metadata: 
      AWS::CloudFormation::Init: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
        configSets: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html#aws-resource-init-commands
          install_all: [install_cfn, install_wildfly, install_codedeploy]               
        install_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets install_all --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=1
              mode: "000400"
              owner: root
              group: root            
          services: # Definets velamais statuss sekojosiem servisiem
            sysvinit: 
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files: ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
        install_wildfly: # Deklareta jaunu konfiguraciju izpildes grupa, kas nodrosinas aplikaciju servera instalaciju un konfiguracijas uz virtuala servera
          packages: # Definets velamais statuss - instaletas - sekojosam programmaturam 
            yum: # Deineta nepieciesamo pakesu instalacija un to menedzmenta sistema, kas tiks izmantota instalacijai - "yum"
              java-1.8.0-openjdk-devel: [] 
              httpd: []        
          users: # Jauna lietotaja izveide
            wildfly: {}                         
          sources: # Noradita velama mape, kura tiks noladeta aplikaciju servera instalacijas paka
            /opt/: "http://download.jboss.org/wildfly/14.0.1.Final/wildfly-14.0.1.Final.tar.gz" 
          files: # Ar "files" atributu deklarets, ka tiks veiktas darbibas ar noteiktu failu
            /etc/default/wildfly: # Janodrosina, ka eksiste fails "wildfly" ar noteiktu saturu un tam jaatrodas "/etc/default/" mape, kuras saturu izmantos Linux operetajsistema palaizot servisus no "/etc/init.d/" mapes 
              content: !Sub |
                JBOSS_HOME="/opt/wildfly-14.0.1.Final" # Defineta "Wildfly" aplikaciju servera instalacijas vieta. Si vertiba tiek padota servera palaisanas procesam 
                JBOSS_USER=wildfly                                           
              mode: "000400" # Noteikts faila piekluves ierobezojums: "read by owner" - lasisanas rezima var pieklut tikai faila ipasnieks
              owner: root # Noteikts faila ipasnieks un vina grupa
              group: root
          commands: # Definetas vairakas komandas, kas jaizpilda uz virtualo serveru instancem                      
            give_permissions: 
              cwd: "/opt/"
              command: "chown -R wildfly:wildfly wildfly-14.0.1.Final" # Tiek definets, ka aplikaciju servera instalacijas mape pieder "wildfly" lietotajam          
            copy_startup:
              cwd: "/etc/init.d" # Noteikts cels jeb vieta, no kurienes japalaiz sekojosas komandas
              test: "test ! -e wildfly" # Ja sads fails jau eksiste, nakama komanda netiek izpildita
              command: "cp /opt/wildfly-14.0.1.Final/docs/contrib/scripts/init.d/wildfly-init-redhat.sh wildfly" # Tiek kopets "Wildfly" programmaturas palaisanas skripts uz noteikto "/etc/init.d/ mapi"
            add_proxy:
              cwd: "/etc/httpd/conf" # Tiek pievienotas paradresacija konfiguracijas "Httpd" servisam - saja gadijuma ienakosa datuplusa tiks paradreseta uz "Wildfly" servisu             
              command: "sed -i '1 s#^.*$#ProxyPass / http://localhost:8080/#;2 s#^.*$#ProxyPassReverse / http://localhost:8080/#' httpd.conf"
          services: # Definets velamais statuss sekojosiem servisiem
            sysvinit:
              wildfly: # "Wildfly" servisam jabut startetam
                enabled: "true"
                ensureRunning: "true" 
                files: ["/etc/default/wildfly"] # Definets, ka ieprieks definetais serviss ir velreiz no jauna jastarte, ja si faila saturs tiek mainits
              httpd: # "Apache Httpd" servisam jabut startetam                 
                enabled: "true"
                ensureRunning: "true"    
        install_codedeploy: # Deklareta jaunu konfiguraciju izpildes grupa, kas nodrosinas virtualo serveru mijiedarbibu ar "CodeDeploy" resursu
          packages: # Definets kadam programmaturu paketem jabut instaletam uz servera
            yum: # Deineta nepieciesamo pakesu instalacija un to menedzmenta sistema, kas tiks izmantota instalacijai - "yum"
              ruby: []                         
          commands: # Definetas vairakas komandas, kas jaizpilda uz virtualo serveru instancem 
            get_install_file:
              cwd: "/home/ec2-user"
              test: "test ! -e install"
              command: "wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install" 
            give_permissions:
              cwd: "/home/ec2-user"
              command: "chmod +x ./install"         
            install_agent:
              cwd: "/home/ec2-user"
              command: "./install auto"   

          
Outputs: # Deklarets, ka bus nepieciesams izvadit noteiktu resursu atributu vertibas

  DNSEndpoint: 
    Description: Application address
    Value: !Join ["", ["http://", !GetAtt ApplicationLoadBalancer.DNSName]] # Defineta vertiba izvadei - domena nosaukuma adrese aplikaciju tikla slodzes lidzsvarotajam 

  AutoScalingGroup:
    Description: AutoScaling group name
    Value: !Ref AutoScalingGroup # Defineta vertiba izvadei - aplikaciju tikla slodzes lidzsvarotaja nosaukums
    Export: 
      Name: !Join [":",[ !Ref "AWS::StackName", AutoScalingGroup]] # Definets, ka si vertiba jaeksporte ka mainigais, lai to varetu izmantot citas "CloudFormation" grupas

# Citi resursi:
# https://stackoverflow.com/questions/48529074/how-is-target-groups-different-from-auto-scaling-groups-in-aws

# ToDo: 
# - Add proper naming for resources
# - Add correct proxy settings for httpd
  