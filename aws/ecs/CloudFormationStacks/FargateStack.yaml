Description: 'This stack creates AWS Fargate infrastructure: log group, cluster, service with application load balancer, task definition, container definition, 2 security groups'


Metadata:
  # Parametri tiek grupēti un kārtoti AWS CloudFormation konsolē.
  AWS::CloudFormation::Interface:
    # Saraksts ar parametru grupām.
    ParameterGroups:
        # Paramteru grupas nosaukums.
      - Label:
          default: Networking configuration 
        # Paramteri un to parādīšanas kārtība konsolē.
        Parameters: [VpcId, PublicSubnets, PrivateSubnets, AlbInboundCidr]
      - Label:
          default: Fargate configuration
        Parameters: [ServiceName, ImageUri, TaskCount, ContainerPort, ServiceSize]
      - Label:
          default: Fargate stack associations with other CloudFormation stacks
        Parameters: [IamRoleStack, NetworkStack]

Parameters:  
  # Saraksta izvēles parametrs - lietotājs izvēlas, kurā esošā VPC tiks izvietoti steka resursi.
  VpcId:
    Type: AWS::EC2::VPC::Id  
    Description: Choose in which VPC resources will be deployed  
  # Saraksta izvēles parametrs - lietotājs izvēlas divus esošus publiskus apakštīklus, kuros tiks izvietots aplikāciju slodzes līdzsvarotājs un tā drošības grupa.  
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>   
    Description: Select 2 public subnets for application load balancer 
  # Saraksta izvēles parametrs - lietotājs izvēlas divus esošus privātus apakštīklus, kuros tiks izvietoti konteineri un to drošības grupas.
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id> 
    Description: Select 2 private subnets for containers   
  # Ievades parametrs - lietotājs ievada ienākošās datuplūsmas atļauto IP adrešu diapozonu.   
  AlbInboundCidr:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Valid CIDR Block Required
    Description: 'ALB Security Group inbound IP address space, RFC 1918 address space only. Example: 0.0.0.0/0 for public access'
    MaxLength: 18
    MinLength: 9    
    Default: '0.0.0.0/0'    
  # Ievades parametrs - lietotājs ievada konteinera porta nummuru, kuru kartēt uz saimniekdatora, lai sūtītu un saņemtu datuplūsmu. 
  ContainerPort:    
    Type: Number
    MinValue: 0
    Description: Container port to expose
  # Ievades parametrs - lietotājs ievada nepieciešamo, vienlaicīgi darbojošo uzdevumu skaitu klāsterī.
  TaskCount:    
    Type: Number
    MinValue: 0
    Description: Number of desired task count  
  # Izvēles parametrs - lietotājs izvēlas aptuvenos ECS servisa izmērus, kas atbilst attiecīgās infrastruktūras vides vajadzībām.  
  ServiceSize:
    Type: String  
    Description: The size of the ECS service (for cpu and memory allocation)      
    AllowedValues: [SMALL, MEDIUM, LARGE]
  # Ievades parametrs - lietotājs ievada ECS servisa nosaukumu.
  ServiceName:    
    Type: String
    MinLength: 1 
    Description: Enter name of your ECS service 
  # Ievades parametrs - lietotājs ievada Docker imidžā URI, kuru izpildīt Docker programmatūrai kā konteineru.  
  ImageUri:    
    Type: String    
    MinLength: 1
    Description: Docker image URI  
  IamRoleStack:    
    Description: 'Enter the name of your IAM resource stack. Used exports: EcsServiceRoleArn, EcsTaskRoleArn'
    Type: String 
    MinLength: 1  
  NetworkStack:    
    Description: 'Enter the name of your Network resource stack. Used exports: VpcCidrBlock'
    Type: String 
    MinLength: 1  

Mappings:
  # Deklarēts kartējums.
  ServiceTypeMap:  
    # Definētas atslēgas un to vērtības - CPU un atmiņas lielumi.
    SMALL:
      Cpu: 512
      Memory: 1024
    MEDIUM:
      Cpu: 1024
      Memory: 2048      
    LARGE:
      Cpu: 2048
      Memory: 4096


Resources:    
  # Definēta ECS klāstera izveide un īpašības - klāstera nosaukums.
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  # Deklarēta monitorēšanas žurnāla grupas izveide.
  LogGroup:
    Type: AWS::Logs::LogGroup
  
  # Definēta Fargate uzdevuma definīcjas faila izveide un saturs, kas apraksta vēlamās uzdevuma un konteinera īpašības. 
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # CPU vienību skaits. Tiek izgūts no ServiceTypeMap kartējuma pēc atsauces uz lietotāja izvēles parametru 'Cpu'.
      Cpu: !FindInMap [ServiceTypeMap, !Ref ServiceSize, 'Cpu'] 
      # IAM loma, kuru konteiners var pieņemt, lai izpildītu noteiktus procesus.
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub ${IamRoleStack}:EcsServiceRoleArn       
      # Vecākobjekta nosaukums, pēc kura tiks veidota katra nākamā definīcijas faila versija.  
      Family: !Sub ${AWS::StackName}-Task-Definition 
      # Atmiņas lielums, kas būs pieejams konteineram. Tiek izgūts no ServiceTypeMap kartējuma pēc atsauces uz lietotāja izvēles parametru 'Memory'.   
      Memory: !FindInMap [ServiceTypeMap, !Ref ServiceSize, Memory]     
      NetworkMode: awsvpc  
      RequiresCompatibilities: [FARGATE]
      # IAM loma, kuru konteiners var pieņemt, lai izpildītu izsaukumus uz AWS API.
      TaskRoleArn: 
        Fn::ImportValue: !Sub ${IamRoleStack}:EcsTaskRoleArn     
      # Konteinera īpašību definēšana.
      # Dokumentācija: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html
      ContainerDefinitions:
        # Definēts konteinera nosaukums.
        - Name: !Sub ${ServiceName}-service
          # Definēts Docker imidža URI.
          Image: !Ref ImageUri
          # Definēta konteinera porta kartēšana uz resursdatoru.       
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: http
          # Definēta pielāgota žurnāla draivera izveide un tā konfigurācijas.
          LogConfiguration:
            # Definēts draivera nosaukums.
            LogDriver: awslogs
            # Definētas draivera opcijas. 
            Options:
              # Žurnāla grupa (atsauce uz iepriekšdefinētu žurnāla resursu)
              awslogs-group: !Ref LogGroup
              # Atsauce uz pseidoparametru AWS::Region
              awslogs-region: !Ref AWS::Region
              # Žurnāla prefikss.
              awslogs-stream-prefix: !Sub awslogs-${ServiceName}-service        
          Essential: true 

  # Deklarets aplikaciju tikla slodzes lidzsvarotajs - darbojas "OSI" modela 7. limeni ("HTTP/S" protokli)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer 
    DependsOn: TargetGroup   
    # Definetas aplikaciju tikla slodzes lidzsvarotaja ipasibas
    Properties:      
      Scheme: internet-facing      
      SecurityGroups: [!Ref ApplicationLoadBalancerSecurityGroup]               
      Subnets: [!Select [0, !Ref PublicSubnets], !Select [1, !Ref PublicSubnets]] 
               

  # Create a Listener for ECS service LoadBalancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener    
    DependsOn: ApplicationLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Create a TargetGroup for LoadBalancer health checks
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:   
      Name: !Sub ${AWS::StackName}-TargetGroup  
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId      
      TargetType: ip      

  # Create a Fargate type ECS service
  FargateService:
    Type: AWS::ECS::Service    
    DependsOn: Listener
    Properties:
      Cluster: !Ref FargateCluster
      DeploymentConfiguration:        
        MinimumHealthyPercent: 100         
        MaximumPercent: 200 
      DesiredCount: !Ref TaskCount
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${ServiceName}-service
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ContainerSecurityGroup]            
          Subnets: [!Select [0, !Ref PrivateSubnets], !Select [1, !Ref PrivateSubnets]]                             
      TaskDefinition: !Ref TaskDefinition  

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ContainerSecurityGroup
      GroupDescription: Access to the fargate containers from VPC 
      VpcId: !Ref VpcId      
      SecurityGroupIngress:
        - CidrIp: 
            Fn::ImportValue: !Sub ${NetworkStack}:VpcCidrBlock
          IpProtocol: -1

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ApplicationLoadBalancerSecurityGroup
      GroupDescription: Access to the application load balancer 
      VpcId: !Ref VpcId    
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AlbInboundCidr    

###############Output section#################
Outputs: 
  # Definēta klāstera izvaddatu un eksporta vērtība - klāstera nosaukums. 
  FargateClusterId:
    Description: The ECS Cluster ID 
    Value: !Ref FargateCluster
    Export:
      Name: !Sub ${AWS::StackName}:FargateCluster
  # Definēta servisa izvaddatu un eksporta vērtība - servisa nosaukums.
  FargateServiceArn:
    Description: The Fargate service ARN 
    Value: !Ref FargateService
    Export:
      Name: !Sub ${AWS::StackName}:FargateServiceArn 
  FargateTaskName:
    Description: The Fargate task name
    Value: !Sub ${ServiceName}-service
    Export:
      Name: !Sub ${AWS::StackName}:FargateServiceName
  # Definēta aplikāciju slodzes līdzsvarotāja izvaddatu vērtība - URL.
  ApplicationLoadBalancerUrl:
    Description: The DNS for the application load balancer
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}


      