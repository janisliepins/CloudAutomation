Parameters: 
  VpcId:
    Type: "AWS::EC2::VPC::Id" 
  VpcSubnetA:
    Type: "AWS::EC2::Subnet::Id" 
  VpcSubnetB:
    Type: "AWS::EC2::Subnet::Id" 
Resources:    
  DB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      DBName: petclinic
      Engine: MySQL
      StorageType: gp2
      MasterUsername: root
      MasterUserPassword: petclinic
      PubliclyAccessible: false
      VPCSecurityGroups: 
      - !GetAtt DBEC2SecurityGroup.GroupId
  S3BucketsInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - "MyS3Role"              
  AutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: "PT5M"
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      Cooldown: "300"
      DesiredCapacity: 2
      HealthCheckGracePeriod: "300"
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfiguration
      TargetGroupARNs: 
        - !Ref DefaultTargetGroup
      MaxSize: 3
      MinSize: 2      
      VPCZoneIdentifier:
        - !Ref VpcSubnetA
        - !Ref VpcSubnetB
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"     
    Properties:
      InstanceType: t2.small
      IamInstanceProfile: 
        Ref: "S3BucketsInstanceProfile"
      ImageId: ami-035be7bafff33b6b6
      KeyName: AWSAdminKeyPair
      SecurityGroups:
        - !Ref EC2SecurityGroup      
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash    
            yum update -y aws-cfn-bootstrap             
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets install_all --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}  
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT5M"                   
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install_all: [install_cfn, install_wildfly, install_codedeploy]               
        install_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets install_all --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=1
              mode: "000400"
              owner: root
              group: root            
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files: ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
        install_wildfly:
          packages:
            yum:
              java-1.8.0-openjdk-devel: []
              httpd: []        
          users: 
            wildfly: {}                         
          sources:
            /opt/: "http://download.jboss.org/wildfly/14.0.1.Final/wildfly-14.0.1.Final.tar.gz" 
          files:
            /etc/default/wildfly:
              content: !Sub |
                JBOSS_HOME="/opt/wildfly-14.0.1.Final"                                           
              mode: "000400"
              owner: root
              group: root
          commands:                        
            give_permissions:
              cwd: "/opt/"
              command: "chown -R wildfly:wildfly wildfly-14.0.1.Final"            
            copy_startup:
              cwd: "/etc/init.d"
              test: "test ! -e wildfly"
              command: "cp /opt/wildfly-14.0.1.Final/docs/contrib/scripts/init.d/wildfly-init-redhat.sh wildfly"
            add_proxy:
              cwd: "/etc/httpd/conf"              
              command: "sed -i '1 s#^.*$#ProxyPass / http://localhost:8080/#;2 s#^.*$#ProxyPassReverse / http://localhost:8080/#' httpd.conf"
          services:
            sysvinit:
              wildfly:
                enabled: "true"
                ensureRunning: "true" 
                files: ["/etc/default/wildfly"]
              httpd:                
                enabled: true
                ensureRunning: true    
        install_codedeploy:
          packages:
            yum:
              ruby: []                         
          commands:   
            get_install_file:
              cwd: "/home/ec2-user"
              test: "test ! -e install"
              command: "wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install" 
            give_permissions:
              cwd: "/home/ec2-user"
              command: "chmod +x ./install"         
            install_agent:
              cwd: "/home/ec2-user"
              command: "./install auto"
  PetclinicLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: "internet-facing"
      Subnets:
        - !Ref VpcSubnetA
        - !Ref VpcSubnetB
      SecurityGroups:
        - !Ref ALBSecurityGroup
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:      
      LoadBalancerArn: !Ref PetclinicLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup      
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:  
      HealthCheckProtocol: "HTTP"
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthCheckIntervalSeconds: 6  #how often alb should send health checks
      HealthCheckTimeoutSeconds: 5 #wait time to get response, must be smaller then the interval
      HealthyThresholdCount: 5 #if succesfull in row, determines that backend is healthy
      UnhealthyThresholdCount: 2 #if failing in row, determines that backend is unhealthy    
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:      
        - IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"    
          CidrIp: 0.0.0.0/0    
  EC2SecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: EC2 Instance Security Group
  EC2InboundRule: # EC2 can only accept traffic from ALB
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        !GetAtt
        - ALBSecurityGroup
        - GroupId
      GroupId:
        !GetAtt
        - EC2SecurityGroup
        - GroupId    
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - 
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: 
          Ref: EC2SecurityGroup               
Outputs:
  DNSEndpoint:
    Description: Application Address
    Value: !Join ["", ["http://", !GetAtt PetclinicLoadBalancer.DNSName]]
  DBEndpoint:
    Description: DB Endpoint
    Value: !GetAtt DB.Endpoint.Address






  