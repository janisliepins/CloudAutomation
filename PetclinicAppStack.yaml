Parameters: # Ievadparametru sadala
  VpcId:
    Type: "AWS::EC2::VPC::Id" # Izveles parametrs VPC izvelei, kura tiks izvietoti resursi
  VpcSubnetA:
    Type: "AWS::EC2::Subnet::Id" # Izveles parametrs apakstikla izvelei, kura tiks izvietota pirma servera instance
  VpcSubnetB:
    Type: "AWS::EC2::Subnet::Id" # Izveles parametrs apakstikla izvelei, kura tiks izvietota otra servera instance
Resources:  # Resursu definesanas sadala   
  PetclinicDatabase: # Deklareta datubazes izveide
    Type: "AWS::RDS::DBInstance" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html
    Properties: # Definetas datubazes ipasibas
      AllocatedStorage: "5" 
      DBInstanceClass: "db.t2.micro" # Datubazes instances klase, AWS ieprieks defineta 
      DBName: "petclinic" 
      Engine: "MySQL" # Datubazes programmatura
      MasterUsername: "root"
      MasterUserPassword: "petclinic"
      PubliclyAccessible: false # Definets, ka datubazes instance nav publiski pieejama
      VPCSecurityGroups: # Dinamiski defineta drosibas grupa ieks izveleta VPC tikla
      - !GetAtt DBEC2SecurityGroup.GroupId
  PetclinicLoadBalancer: # Deklarets aplikaciju tikla slodzes lidzsvarotajs
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Properties: # Definetas aplikaciju tikla slodzes lidzsvarotaja ipasibas
      Scheme: "internet-facing" # Definets, ka piekluve no interneta pieejama
      Subnets: # Defineti divi apakstikli, kas tiks pievienoti aplikaciju tikla slodzes lidzsvarotajam. Vertibas tiek iegutas no izveles parametru sadalas    
        - !Ref "VpcSubnetA" 
        - !Ref "VpcSubnetB"     
      SecurityGroups: 
        - !Ref "ALBSecurityGroup" # Atsauce uz drosibas grupu, kas tiks asocieta ar so resursu
  LoadBalancerListener: # Deklarets aplikaciju tikla slodzes lidzsvarotaja klausitajs
    Type: "AWS::ElasticLoadBalancingV2::Listener" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Properties: # Definetas aplikaciju tikla slodzes lidzsvarotaja klausitaja ipasibas      
      LoadBalancerArn: !Ref "PetclinicLoadBalancer" # Atsauce uz ieprieks izveidoto aplikaciju tikla slodzes lidzsvarotaju, kam tiks pievienots sis resurss
      Port: 80 # Ports uz kuru klausas resurss pec ienakosiem datuplusmas pieprasijumiem
      Protocol: "HTTP" # Protokols, kurs jaizmanto klientam, lai sutitu pieprasijumus
      DefaultActions: # Defineta nokluseta darbiba, kas javeic resursam - paradreset uz noteiktu merka grupu, kas deklareta un defineta nakosaja "DefaultTargetGroup" sadala
        - Type: "forward" 
          TargetGroupArn: !Ref "DefaultTargetGroup"      
  DefaultTargetGroup: # Deklareta merka grupa aplikaciju tikla slodzes lidzsvarotaja klausitajam
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Properties: # Definetas merka grupas ipasibas
      HealthCheckProtocol: "HTTP" # Protokols, kurs jaizmanto tikla slodzes lidzsvarotajam, lai veiktu instancu statusa parbaudi
      HealthCheckPath: "/" # Adresacijas cels uz kuru tiks veikta statusa parbaude
      HealthCheckPort: "traffic-port" # Adresacijas ports uz kuru tiks veikta statusa parbaude. Vertiba "traffic-port" atsaucas uz serveru instances defineto portu, uz kuru katra instance sanems datuplusmu
      HealthCheckIntervalSeconds: 6  # Definets, cik biezi aplikaciju tikla slodzes lidzsvarotajas sutis statusa parbaudes. Saja gadijuma 6 sekundes starp nakamas parbaudes veiksanas
      HealthCheckTimeoutSeconds: 5 # Definets, cik ilgi aplikaciju tikla slodzes lidzsvarotajas gaidis atbildi no instances. Saja gadijuma 5 sekundes 
      HealthyThresholdCount: 5 # Definets sekmigu atbilzu skaits, kas jasanem pec kartas no servera instances, lai definetu, ka servera instances statuss ir apmierinoss
      UnhealthyThresholdCount: 2 # Definets nesekmigu atbilzu skaits, kas jasanem pec kartas no servera instances, lai definetu, ka servera instances statuss ir neapmierinos
      VpcId: !Ref VpcId # Definets virtualais tikls, kura tiks izvietots resurss    
      Port: 80 # Ports uz kuru merka grupas servera instances sanems datuplusmu
      Protocol: "HTTP" # Protokols, kurs tiks izmantots datuplusmas marsutesanai uz merka grupas servera instancem
  S3BucketsInstanceProfile: # Deklarets, ka tiks definets noteikts pielaizu profils (kurs jau ir ieprieks manuali definets "IAM" resursa sadala), ar kuru tiks asocietas servera instances, lai tas iegutu pieeju "S3" glabatuves resursiem
    Type: "AWS::IAM::InstanceProfile" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html
    Properties: 
      Path: "/"
      Roles: ["MyS3Role"] # Manuali izveidota piekluves vadibas loma, kas ietver piekluvju noteikumus "S3" glabatuves objektiem            
  AutoScalingGroup: # Deklareta automatiska merogosanas grupa
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: "PT5M"
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Type: "AWS::AutoScaling::AutoScalingGroup" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
    Properties: # Definetas automatiskas merogosanas grupas ipasibas
      Cooldown: 300
      DesiredCapacity: "2" # Definets, ka sai grupai jasastav no 2 serveru instancem
      HealthCheckType: "EC2" # AWS resursa tipa pret kuru tiks veikta statusa parbaude - saja gadijuma servera instances
      LaunchConfigurationName: !Ref LaunchConfiguration # Atsauce uz palaisanas konfiguraciju, kura tiks izmantota, izveidojot servera instances un definejot to ipasibas
      TargetGroupARNs: [!Ref DefaultTargetGroup] # Atsauce uz merka grupu
      MaxSize: "3" # Definets maksimalais servera instancu skaits
      MinSize: "2" # Definets minimalais servera instancu skaits    
      VPCZoneIdentifier: # Defineti divi apakstikli, kuros tiks izvietota katra no serveru instancem. Vertibas tiek iegutas no izveles parametru sadalas 
        - !Ref VpcSubnetA
        - !Ref VpcSubnetB
  LaunchConfiguration: # Deklareta palaisanas konfiguracija "EC2" resursa servera instancem, kuru izmanto automatiskas merogosanas grupa servera instancu konfiguresanai
    Type: "AWS::AutoScaling::LaunchConfiguration" # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html  
    Properties: 
      InstanceType: t2.small # Statiski definets velamais "EC2" resursa tips - apzime virtuala servera izmera un jaudas apmerus
      IamInstanceProfile: !Ref "S3BucketsInstanceProfile" # Atsauce uz pielaizu profilu, kas tiks asociets ar instancem
      ImageId: ami-035be7bafff33b6b6 # Statiski definets velamais "EC2" resursa - virtuala servera - imidza identifikacijas nummurs - saja gadijuma "Amazon Linux 2 AMI", no kura tiks veidotas servera instances
      SecurityGroups:
        - !Ref EC2SecurityGroup # Atsauce uz drosibas grupu, kas tiks asocieta ar so resursu    
      UserData: # Ievaddatu definesana, noteiktu komandu izpildei, kad tiek palaista virtualais serveris
        'Fn::Base64': # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
          !Sub | # Pirma darbiba startejot jaunu servera instanci ir instalet "CloudFormation" paligskriptus, kas laus talak automatized servera konfiguresanu atbilstosi vajadzibam
            #!/bin/bash    
            yum update -y aws-cfn-bootstrap # Tiek instaleta "AWS" uztureta paligskriptu programmatura             
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets install_all --region ${AWS::Region} # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-signal.html
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT5M"                   
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install_all: [install_cfn, install_wildfly, install_codedeploy]               
        install_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --configsets install_all --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=1
              mode: "000400"
              owner: root
              group: root            
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files: ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
        install_wildfly: # Deklareta jaunu konfiguraciju izpildes grupa, kas nodrosinas aplikaciju servera instalaciju un konfiguracijas uz virtuala servera
          packages:
            yum: # Deineta nepieciesamo pakesu instalacija 
              java-1.8.0-openjdk-devel: [] 
              httpd: []        
          users: # Jauna lietotaja izveide
            wildfly: {}                         
          sources:
            /opt/: "http://download.jboss.org/wildfly/14.0.1.Final/wildfly-14.0.1.Final.tar.gz" 
          files:
            /etc/default/wildfly:
              content: !Sub |
                JBOSS_HOME="/opt/wildfly-14.0.1.Final"                                           
              mode: "000400"
              owner: root
              group: root
          commands:                        
            give_permissions:
              cwd: "/opt/"
              command: "chown -R wildfly:wildfly wildfly-14.0.1.Final"            
            copy_startup:
              cwd: "/etc/init.d"
              test: "test ! -e wildfly"
              command: "cp /opt/wildfly-14.0.1.Final/docs/contrib/scripts/init.d/wildfly-init-redhat.sh wildfly"
            add_proxy:
              cwd: "/etc/httpd/conf"              
              command: "sed -i '1 s#^.*$#ProxyPass / http://localhost:8080/#;2 s#^.*$#ProxyPassReverse / http://localhost:8080/#' httpd.conf"
          services:
            sysvinit:
              wildfly:
                enabled: "true"
                ensureRunning: "true" 
                files: ["/etc/default/wildfly"]
              httpd:                
                enabled: true
                ensureRunning: true    
        install_codedeploy: # Deklareta jaunu konfiguraciju izpildes grupa, kas nodrosinas virtualo serveru mijiedarbibu ar "CodeDeploy" resursu
          packages: # Definets kadam programmaturu paketem jabut instaletam uz servera
            yum:
              ruby: []                         
          commands:   
            get_install_file:
              cwd: "/home/ec2-user"
              test: "test ! -e install"
              command: "wget https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install" 
            give_permissions:
              cwd: "/home/ec2-user"
              command: "chmod +x ./install"         
            install_agent:
              cwd: "/home/ec2-user"
              command: "./install auto"  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:      
        - IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"    
          CidrIp: 0.0.0.0/0    
  EC2SecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: EC2 Instance Security Group
  EC2InboundRule: # EC2 can only accept traffic from ALB
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        !GetAtt
        - ALBSecurityGroup
        - GroupId
      GroupId:
        !GetAtt
        - EC2SecurityGroup
        - GroupId    
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - 
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: 
          Ref: EC2SecurityGroup               
Outputs:
  DNSEndpoint:
    Description: Application Address
    Value: !Join ["", ["http://", !GetAtt PetclinicLoadBalancer.DNSName]]
  DBEndpoint:
    Description: PetclinicDatabase endpoint
    Value: !GetAtt PetclinicDatabase.Endpoint.Address






  