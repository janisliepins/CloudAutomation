version: 0.2

# Tiek definētas būvējuma izpildes fāzes
# Pirms būvējuma fāzē tiek definēt mainīgais:
#   1. REPOSITORY_URI (ECR repozitorija ARN) tiek izveidots ar ACCOUNT_ID un AWS_DEFAULT_REGION pseido parametriem un CodeBuild projekta vides mainīgo IMAGE_REPOSITORY
# Kā pēdēja darbība tiek izpildīta pieteikšanās ECR repozitorijā
phases:
  pre_build:
    commands:       
      - REPOSITORY_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPOSITORY}
      - IMAGE_TAG=${REPOSITORY_URI}:${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})       
  
  # Būvējuma fāzē tiek izpildītas Maven un Docker komandas:
  #   1. mvn clean package -  izpilda koda kompilāciju, testus un artekta izveidi
  #   2. docker build - tiek izveidots jauns Docker imidžs pēc Dockerfile definīcijas 
  #   Docker imidža nosaukums veidots ar CodeBuild vides mainīgo CODEBUILD_RESOLVED_SOURCE_VERSION un
  #   pirms būvejumā fāzē definētajiem mainīgajiem REPOSITORY_URI un VERSION  
  build:
    commands:
      - mvn clean package
      - docker build -t ${IMAGE_TAG} .      

  # Pēc būvējuma fāzē tiek izpildītas Docker un Linux čaulas komandas:
  #   1. docker push -  tiek augšupielādēts Docker imidžs ECR repozitorijā;
  #   2. printf - būvējuma saknes līmenī tiek izveidots imagedefinitions.json fails, kas satur informāciju par ECS uzdevuma un Docker imidžā nosaukumumiem
  post_build:
    commands:      
      - docker push ${IMAGE_TAG}
      - printf '[{"name":"%s","imageUri":"%s"}]' ${TASK_NAME} ${IMAGE_TAG}  > imagedefinitions.json  

# Tiek deklarēti aplikācijas būvējuma artifakti:
#   Maven izveidotā JAR pakotne un imagedefinitions.json fails
artifacts:
  files:
    - target/*.jar
    - imagedefinitions.json

